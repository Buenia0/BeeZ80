cmake_minimum_required(VERSION 3.10)
project(beez80)

# Require C++11 (and position independent code)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(BUILD_Z80_TESTS "Enables the BeeZ80 test suite." OFF)

set(BEEZ80_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

set(BEEZ80_TEST_SOURCES
	beez80-tests.cpp)

set(BEEZ80_HEADER
	beez80.h)

set(BEEZ80_SOURCE
	beez80.cpp)

add_library(beez80 ${BEEZ80_SOURCE} ${BEEZ80_HEADER})
target_include_directories(beez80 PUBLIC ${BEEZ80_INCLUDE_DIR})
target_compile_definitions(beez80 PRIVATE BEEZ80_STATIC=1 _CRT_SECURE_NO_WARNINGS=1)
add_library(libbeez80 ALIAS beez80)

if (BUILD_Z80_TESTS STREQUAL "ON")
    project(beez80-tests)
    add_executable(beez80-tests ${BEEZ80_TEST_SOURCES})
    include_directories(beez80-tests ${BEEZ80_INCLUDE_DIR})
    target_link_libraries(beez80-tests libbeez80)
endif()

if (WIN32)
    message(STATUS "Operating system is Windows.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(beez80 PRIVATE -Wall)
	message(STATUS "Compiler is MinGW.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL MSVC)
	message(WARNING "MSVC support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(beez80 PRIVATE /W4)
	message(STATUS "Compiler is MSVC.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	target_compile_options(beez80 PRIVATE -Wall)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif (UNIX AND NOT APPLE)
    message(STATUS "Operating system is Linux.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(beez80 PRIVATE -Wall)
	message(STATUS "Compiler is MinGW.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	target_compile_options(beez80 PRIVATE -Wall)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif (APPLE)
    message(STATUS "Operating system is Mac.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
	target_compile_options(beez80 PRIVATE -Wall)
	message(STATUS "Compiler is AppleClang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
else()
    message(SEND_ERROR "Operating system not supported.")
    return()
endif()